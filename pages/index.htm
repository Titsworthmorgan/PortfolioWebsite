<!DOCTYPE htm>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>
    *{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
    #canvas1{
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    height: 100%;
}
</style>
<body>
    <canvas id="canvas1"></canvas>
    <script type="module">
const canvas = document.getElementById("canvas1");
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

let particlesArray;

let mouse = {
    x: null,
    y: null,
    radius: (canvas.height/80) * (canvas.width/80)
}

window.addEventListener('mousemove',
    function(event) {
        mouse.x = event.x;
        mouse.y = event.y;
    }
);

class Particle {
    constructor(x, y, directionX, directionY, size, color){
        this.x = x;
        this.y = y;
        this.directionX = directionX;
        this.directionY = directionY;
        this.size = size;
        this.color = color;
    }

    draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI + 2, false);
        ctx.fillStyle = '#FFFFFF';
        ctx.fill()
    }

    update() {
        if (this.x > canvas.width || this.x < 0){
            this.directionX = -this.directionX;
        }
        if(this.y > canvas.height || this.y < 0){
            this.directionY = -this.directionY;
        }

        let dx = mouse.x - this.x;
        let dy = mouse.y - this.y;
        let distance = Math.sqrt(dx*dx + dy*dy);
        if(distance < mouse.radius + this.size){
            if(mouse.x < this.x && this.x < canvas.width - this.size * 10){
                this.x += 1;
            }
            if(mouse.x > this.x && this.x > this.size * 10){
                this.x -= 1;
            }
            if(mouse.y < this.y && this.y < canvas.height - this.size * 10){
                this.y += 1;
            }
            if (mouse.y > this.y && this.y > this.size * 10){
                this.y -= 1;
            }
        }
        this.x += this.directionX;
        this.y += this.directionY;
        this.draw()
    }
}

function init(){
    particlesArray = [];
    let numberOfParticles = (canvas.height * canvas.width) / 15000;
    for(let i = 0; i<numberOfParticles; i++){
        let size = (Math.random() * 5) + 1;
        let x = (Math.random() * ((innerWidth - size * 2) - (size * 2)) + size * 2);
        let y = (Math.random() * ((innerHeight - size * 2) - (size * 2)) + size * 2);
        let directionX = (Math.random() * 3) - 2.5;
        let directionY = (Math.random() * 3) - 2.5;
        let color = '#FFFFFF';
        particlesArray.push(new Particle(x, y, directionX, directionY, size, color));
    }
}
//multiply particlesArray.length * number multiplier for number of particles
function connect (){
    let opacitValue = 1;
    for(let a = 0; a < particlesArray.length / 5; a++){
        for(let b = a; b < particlesArray.length; b++){
            let distance = ((particlesArray[a].x - particlesArray[b].x)
            * (particlesArray[a].x - particlesArray[b].x))
            + ((particlesArray[a].y - particlesArray[b].y) * (particlesArray[a].y - particlesArray[b].y));
            if(distance < (canvas.width/7) * (canvas.height/7)){
                opacitValue = 1 - (distance/20000)
                ctx.strokeStyle='rgba(255,255,255' + opacitValue + ')' ;
                ctx.lineWidth = 1;
                ctx.beginPath();
                ctx.moveTo(particlesArray[a].x, particlesArray[a].y);
                ctx.lineTo(particlesArray[b].x, particlesArray[b].y);
                ctx.stroke();
            }
        }
    }
}

function animate() {
    requestAnimationFrame(animate);
    ctx.clearRect(0,0, innerWidth, innerHeight);
    for(let i = 0; i < particlesArray.length; i++){
        particlesArray[i].update();
    }
    connect()
}

window.addEventListener('resize', 
function(){
    canvas.width = innerWidth;
    canvas.height = innerHeight;
    mouse.radius = ((canvas.height/20) * (canvas.height/50));
    init()
    }
)
//  fix later
window.addEventListener('mouseout', 
    function(){
        mouse.x = undefined;
        mouse.y = undefined;
    })
init();
animate();
console.log(particlesArray)
</script>
</body>
</html>